{"version":3,"sources":["components/Header/index.js","components/Story/index.js","components/User/index.js","components/Feed/index.js","components/App/index.js","serviceWorker.js","index.js"],"names":["StyledNavLink","styled","NavLink","Header","isActive","path","match","location","pathname","indexOf","to","activeClassName","Story","User","Feed","useState","data","setData","feedType","split","slice","useEffect","fetch","then","response","json","map","item","index","id","App","component","Boolean","window","hostname","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"iZAKA,IAAMA,EAAgBC,YAAOC,IAAPD,CAAH,KA0DJE,MAnDf,WACE,IAAMC,EAAW,SAACC,GAChB,OAAO,SAAkBC,EAAOC,GAC9B,OAA4C,IAArCA,EAASC,SAASC,QAAQJ,KAIrC,OACE,6BACE,kBAAC,IAAD,CAAMK,GAAG,WAAT,aAGA,kBAACV,EAAD,CACEW,gBAAgB,SAChBD,GAAG,UACHN,SAAUA,EAAS,UAHrB,OAOA,kBAACJ,EAAD,CACEW,gBAAgB,SAChBD,GAAG,YACHN,SAAUA,EAAS,YAHrB,OAOA,kBAACJ,EAAD,CACEW,gBAAgB,SAChBD,GAAG,UACHN,SAAUA,EAAS,UAHrB,QAOA,kBAACJ,EAAD,CACEW,gBAAgB,SAChBD,GAAG,SACHN,SAAUA,EAAS,SAHrB,OAOA,kBAACJ,EAAD,CACEW,gBAAgB,SAChBD,GAAG,UACHN,SAAUA,EAAS,UAHrB,UC1CSQ,MARf,WACE,OACE,uCCMWC,MARf,WACE,OACE,sC,QCyBWC,MA1Bf,YAA6B,IAAbP,EAAY,EAAZA,SAAY,EACFQ,mBAAS,IADP,mBACnBC,EADmB,KACbC,EADa,KAEpBC,EAAWX,EAASC,SAASW,MAAM,KAAKC,MAAM,GAAG,GASvD,OARAC,qBAAU,WACRC,MAAM,oCAAD,OAAqCJ,EAArC,YAAwDK,MAAK,SAACC,GACjE,OAAOA,EAASC,UACfF,MAAK,SAACP,GACPC,EAAQD,QAET,CAACE,IAGF,6BACGF,EAAKU,KAAI,SAACC,EAAMC,GAAP,OACR,6BACGD,EAAKE,SCUDC,MApBf,WACE,OACE,kBAAC,IAAD,KACE,kBAAC,EAAD,MACA,8BACE,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOzB,KAAK,aAAa0B,UAAWnB,IACpC,kBAAC,IAAD,CAAOP,KAAK,YAAY0B,UAAWlB,IACnC,kBAAC,IAAD,CAAOR,KAAK,cAAc0B,UAAWjB,IACrC,kBAAC,IAAD,CAAOT,KAAK,gBAAgB0B,UAAWjB,IACvC,kBAAC,IAAD,CAAOT,KAAK,cAAc0B,UAAWjB,IACrC,kBAAC,IAAD,CAAOT,KAAK,aAAa0B,UAAWjB,IACpC,kBAAC,IAAD,CAAOT,KAAK,cAAc0B,UAAWjB,IACrC,kBAAC,IAAD,CAAUJ,GAAG,gBCTHsB,QACW,cAA7BC,OAAO1B,SAAS2B,UAEe,UAA7BD,OAAO1B,SAAS2B,UAEhBD,OAAO1B,SAAS2B,SAAS5B,MACvB,2DCZN6B,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBlB,MAAK,SAAAmB,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.14b366b6.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nimport styled from 'styled-components';\r\nimport { Link, NavLink } from 'react-router-dom';\r\n\r\nconst StyledNavLink = styled(NavLink)`\r\n  text-decoration: none;\r\n  &.active {\r\n    text-decoration: underline;\r\n  }\r\n`;\r\n\r\nfunction Header() {\r\n  const isActive = (path) => {\r\n    return function isActive(match, location) {\r\n      return location.pathname.indexOf(path) !== -1;\r\n    };\r\n  };\r\n\r\n  return (\r\n    <nav>\r\n      <Link to=\"/news/1\">\r\n        Logo Here\r\n      </Link>\r\n      <StyledNavLink\r\n        activeClassName=\"active\"\r\n        to=\"/news/1\"\r\n        isActive={isActive('/news')}\r\n      >\r\n        Top\r\n      </StyledNavLink>\r\n      <StyledNavLink\r\n        activeClassName=\"active\"\r\n        to=\"/newest/1\"\r\n        isActive={isActive('/newest')}\r\n      >\r\n        New\r\n      </StyledNavLink>\r\n      <StyledNavLink\r\n        activeClassName=\"active\"\r\n        to=\"/show/1\"\r\n        isActive={isActive('/show')}\r\n      >\r\n        Show\r\n      </StyledNavLink>\r\n      <StyledNavLink\r\n        activeClassName=\"active\"\r\n        to=\"/ask/1\"\r\n        isActive={isActive('/ask')}\r\n      >\r\n        Ask\r\n      </StyledNavLink>\r\n      <StyledNavLink\r\n        activeClassName=\"active\"\r\n        to=\"/jobs/1\"\r\n        isActive={isActive('/jobs')}\r\n      >\r\n        Jobs\r\n      </StyledNavLink>\r\n    </nav>\r\n  )\r\n}\r\n\r\nexport default Header;\r\n","import React from 'react';\r\n\r\nfunction Story() {\r\n  return (\r\n    <div>\r\n      Story\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Story;\r\n","import React from 'react';\r\n\r\nfunction User() {\r\n  return (\r\n    <div>\r\n      User\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default User;\r\n","import React, { useState, useEffect } from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nfunction Feed({ location }) {\r\n  const [data, setData] = useState([]);\r\n  const feedType = location.pathname.split('/').slice(1)[0]\r\n  useEffect(() => {\r\n    fetch(`https://node-hnapi.herokuapp.com/${feedType}?page=1`).then((response) => {\r\n      return response.json();\r\n    }).then((data) => {\r\n      setData(data);\r\n    });\r\n  }, [feedType]);\r\n\r\n  return (\r\n    <div>\r\n      {data.map((item, index) => (\r\n        <div>\r\n          {item.id}\r\n        </div>\r\n      ))}\r\n    </div>\r\n  )\r\n}\r\n\r\nFeed.propTypes = {\r\n  location: PropTypes.shape({ pathname: PropTypes.string }).isRequired,\r\n};\r\n\r\nexport default Feed;\r\n","import React from 'react';\r\n\r\nimport { BrowserRouter as Router, Redirect, Route, Switch } from 'react-router-dom';\r\nimport Header from '../Header';\r\nimport Story from '../Story';\r\nimport User from '../User';\r\nimport Feed from '../Feed';\r\n\r\nfunction App() {\r\n  return (\r\n    <Router>\r\n      <Header />\r\n      <main>\r\n        <Switch>\r\n          <Route path=\"/story/:id\" component={Story} />\r\n          <Route path=\"/user/:id\" component={User} />\r\n          <Route path=\"/news/:page\" component={Feed} />\r\n          <Route path=\"/newest/:page\" component={Feed} />\r\n          <Route path=\"/show/:page\" component={Feed} />\r\n          <Route path=\"/ask/:page\" component={Feed} />\r\n          <Route path=\"/jobs/:page\" component={Feed} />\r\n          <Redirect to=\"/news/1\" />\r\n        </Switch>\r\n      </main>\r\n    </Router>\r\n  )\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}